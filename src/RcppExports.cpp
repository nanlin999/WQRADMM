// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// WS
Rcpp::List WS(arma::mat x, arma::vec y, arma::vec rep, double tau, arma::vec betahat, bool intercept, String corrtype, double epsw, double maxstepw);
RcppExport SEXP _WQRADMM_WS(SEXP xSEXP, SEXP ySEXP, SEXP repSEXP, SEXP tauSEXP, SEXP betahatSEXP, SEXP interceptSEXP, SEXP corrtypeSEXP, SEXP epswSEXP, SEXP maxstepwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type rep(repSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type betahat(betahatSEXP);
    Rcpp::traits::input_parameter< bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< String >::type corrtype(corrtypeSEXP);
    Rcpp::traits::input_parameter< double >::type epsw(epswSEXP);
    Rcpp::traits::input_parameter< double >::type maxstepw(maxstepwSEXP);
    rcpp_result_gen = Rcpp::wrap(WS(x, y, rep, tau, betahat, intercept, corrtype, epsw, maxstepw));
    return rcpp_result_gen;
END_RCPP
}
// WQRADMM
Rcpp::List WQRADMM(arma::mat x, arma::vec y, arma::vec rep, double tau, bool intercept, String esttype, bool warmstart, String corrtype, double rhoCQR, double rhoWQR, double eps, double epsw, int maxstep, int maxstepw);
RcppExport SEXP _WQRADMM_WQRADMM(SEXP xSEXP, SEXP ySEXP, SEXP repSEXP, SEXP tauSEXP, SEXP interceptSEXP, SEXP esttypeSEXP, SEXP warmstartSEXP, SEXP corrtypeSEXP, SEXP rhoCQRSEXP, SEXP rhoWQRSEXP, SEXP epsSEXP, SEXP epswSEXP, SEXP maxstepSEXP, SEXP maxstepwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type rep(repSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< String >::type esttype(esttypeSEXP);
    Rcpp::traits::input_parameter< bool >::type warmstart(warmstartSEXP);
    Rcpp::traits::input_parameter< String >::type corrtype(corrtypeSEXP);
    Rcpp::traits::input_parameter< double >::type rhoCQR(rhoCQRSEXP);
    Rcpp::traits::input_parameter< double >::type rhoWQR(rhoWQRSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< double >::type epsw(epswSEXP);
    Rcpp::traits::input_parameter< int >::type maxstep(maxstepSEXP);
    Rcpp::traits::input_parameter< int >::type maxstepw(maxstepwSEXP);
    rcpp_result_gen = Rcpp::wrap(WQRADMM(x, y, rep, tau, intercept, esttype, warmstart, corrtype, rhoCQR, rhoWQR, eps, epsw, maxstep, maxstepw));
    return rcpp_result_gen;
END_RCPP
}
// paraWQRADMM
Rcpp::List paraWQRADMM(arma::mat x, arma::vec y, int K, arma::vec rep, double tau, bool intercept, String esttype, bool warmstart, String corrtype, double rhoCQR, double rhoWQR, double eps, double epsw, int maxstep, int maxstepw);
RcppExport SEXP _WQRADMM_paraWQRADMM(SEXP xSEXP, SEXP ySEXP, SEXP KSEXP, SEXP repSEXP, SEXP tauSEXP, SEXP interceptSEXP, SEXP esttypeSEXP, SEXP warmstartSEXP, SEXP corrtypeSEXP, SEXP rhoCQRSEXP, SEXP rhoWQRSEXP, SEXP epsSEXP, SEXP epswSEXP, SEXP maxstepSEXP, SEXP maxstepwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type rep(repSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< String >::type esttype(esttypeSEXP);
    Rcpp::traits::input_parameter< bool >::type warmstart(warmstartSEXP);
    Rcpp::traits::input_parameter< String >::type corrtype(corrtypeSEXP);
    Rcpp::traits::input_parameter< double >::type rhoCQR(rhoCQRSEXP);
    Rcpp::traits::input_parameter< double >::type rhoWQR(rhoWQRSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< double >::type epsw(epswSEXP);
    Rcpp::traits::input_parameter< int >::type maxstep(maxstepSEXP);
    Rcpp::traits::input_parameter< int >::type maxstepw(maxstepwSEXP);
    rcpp_result_gen = Rcpp::wrap(paraWQRADMM(x, y, K, rep, tau, intercept, esttype, warmstart, corrtype, rhoCQR, rhoWQR, eps, epsw, maxstep, maxstepw));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_WQRADMM_WS", (DL_FUNC) &_WQRADMM_WS, 9},
    {"_WQRADMM_WQRADMM", (DL_FUNC) &_WQRADMM_WQRADMM, 14},
    {"_WQRADMM_paraWQRADMM", (DL_FUNC) &_WQRADMM_paraWQRADMM, 15},
    {NULL, NULL, 0}
};

RcppExport void R_init_WQRADMM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
